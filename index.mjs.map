{"version":3,"file":"index.mjs","sources":["../lib/svariancepn.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport ssumpw from '@stdlib/blas-ext-base-ssumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = svariancepn( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction svariancepn( N, correction, x, stride ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Compute an estimate for the mean:\n\tmu = ssumpw( N, x, stride ) / N;\n\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = float64ToFloat32( x[ ix ] - mu );\n\t\tM2 = float64ToFloat32( M2 + float64ToFloat32( d*d ) );\n\t\tM = float64ToFloat32( M + d );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( float64ToFloat32(M2/n) - float64ToFloat32( float64ToFloat32(M/N)*float64ToFloat32(M/n) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default svariancepn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport { ndarray as ssumpw } from '@stdlib/blas-ext-base-ssumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = svariancepn( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction svariancepn( N, correction, x, stride, offset ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Compute an estimate for the mean:\n\tmu = ssumpw( N, x, stride, offset ) / N;\n\n\t// Compute the variance...\n\tix = offset;\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = float64ToFloat32( x[ ix ] - mu );\n\t\tM2 = float64ToFloat32( M2 + float64ToFloat32( d*d ) );\n\t\tM = float64ToFloat32( M + d );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( float64ToFloat32(M2/n) - float64ToFloat32( float64ToFloat32(M/N)*float64ToFloat32(M/n) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default svariancepn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport svariancepn from './svariancepn.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( svariancepn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default svariancepn;\n"],"names":["svariancepn","N","correction","x","stride","mu","ix","M2","M","d","n","i","NaN","ssumpw","float64ToFloat32","offset","setReadOnly","ndarray"],"mappings":";;uUAuDA,SAASA,EAAaC,EAAGC,EAAYC,EAAGC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIT,EAAIC,EACHD,GAAK,GAAKS,GAAK,EACnB,OAAOE,IAER,GAAW,IAANX,GAAsB,IAAXG,EACf,OAAO,EAaR,IAVAC,EAAKQ,EAAQZ,EAAGE,EAAGC,GAAWH,EAG7BK,EADIF,EAAS,GACP,EAAEH,GAAKG,EAER,EAGNG,EAAK,EACLC,EAAI,EACEG,EAAI,EAAGA,EAAIV,EAAGU,IACnBF,EAAIK,EAAkBX,EAAGG,GAAOD,GAChCE,EAAKO,EAAkBP,EAAKO,EAAkBL,EAAEA,IAChDD,EAAIM,EAAkBN,EAAIC,GAC1BH,GAAMF,EAEP,OAAOU,EAAkBA,EAAiBP,EAAGG,GAAKI,EAAkBA,EAAiBN,EAAEP,GAAGa,EAAiBN,EAAEE,IAC9G,CChCA,SAASV,EAAaC,EAAGC,EAAYC,EAAGC,EAAQW,GAC/C,IAAIV,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIT,EAAIC,EACHD,GAAK,GAAKS,GAAK,EACnB,OAAOE,IAER,GAAW,IAANX,GAAsB,IAAXG,EACf,OAAO,EASR,IANAC,EAAKQ,EAAQZ,EAAGE,EAAGC,EAAQW,GAAWd,EAGtCK,EAAKS,EACLR,EAAK,EACLC,EAAI,EACEG,EAAI,EAAGA,EAAIV,EAAGU,IACnBF,EAAIK,EAAkBX,EAAGG,GAAOD,GAChCE,EAAKO,EAAkBP,EAAKO,EAAkBL,EAAEA,IAChDD,EAAIM,EAAkBN,EAAIC,GAC1BH,GAAMF,EAEP,OAAOU,EAAkBA,EAAiBP,EAAGG,GAAKI,EAAkBA,EAAiBN,EAAEP,GAAGa,EAAiBN,EAAEE,IAC9G,CC1DAM,EAAAhB,EAAA,UAAAiB"}